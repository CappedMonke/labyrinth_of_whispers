//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Player/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Player/Controls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Controls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerAndroid"",
            ""id"": ""b903b735-9251-4989-afb6-b814584f931f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""762c32f2-51ba-41e8-9abb-740526b4f033"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""c6adc1a5-eb3a-45e5-b962-abb2bdd020b1"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d5d8d1cf-eaef-431b-ac71-b0561f57aca3"",
                    ""path"": ""<AttitudeSensor>/attitude"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Android"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f17a39db-5f4f-4463-ace6-1ebcc3754286"",
                    ""path"": ""<Accelerometer>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Android"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerPC"",
            ""id"": ""194eb524-e083-4ef6-b0a6-48db4293df8f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""01aa8d11-67b8-4e04-8288-c8349c86d216"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""58312efb-5bed-4715-bbba-f6990b146330"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AdjustSpeed"",
                    ""type"": ""Button"",
                    ""id"": ""5469d123-689a-46eb-a30b-d87aa260be1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3f8d2827-947e-40fd-99d0-28f27e3fd435"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c62fd981-8330-4337-9715-8ccb76cd8899"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8fefce25-8e91-4948-965b-9a63742114f5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""1256cbb7-e67b-435d-8679-04f7441b15d5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e88f31f1-0233-4474-b917-5458bd30a747"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""09a3e716-5dbe-493f-a16f-0b7cc20e1dcb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f612ffab-9c59-42fd-8bfe-29413fdd3587"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": """",
                    ""action"": ""AdjustSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d743eca-3a3d-46bb-97a6-bf5cb3486a96"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""AdjustSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""935cdbca-5589-4a8d-9025-147c2aab61b2"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""AdjustSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fb7e87f-46f8-4808-a789-e11f36fa3a98"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=4)"",
                    ""groups"": """",
                    ""action"": ""AdjustSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BlindCanePC"",
            ""id"": ""e26f5c3b-e8e2-442d-96f6-be1c1ef03a20"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""84fe5160-0ae8-46b2-bccd-9cdf813b6b75"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f8deb796-a96b-42a8-9df1-74ce34d857cf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2b5a983f-dac8-4967-a4a2-c4dff0fb09a8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""01e21da9-7f68-4e7d-b809-ea70da4c7be9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";PC"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerAndroid
        m_PlayerAndroid = asset.FindActionMap("PlayerAndroid", throwIfNotFound: true);
        m_PlayerAndroid_Move = m_PlayerAndroid.FindAction("Move", throwIfNotFound: true);
        m_PlayerAndroid_Rotate = m_PlayerAndroid.FindAction("Rotate", throwIfNotFound: true);
        // PlayerPC
        m_PlayerPC = asset.FindActionMap("PlayerPC", throwIfNotFound: true);
        m_PlayerPC_Move = m_PlayerPC.FindAction("Move", throwIfNotFound: true);
        m_PlayerPC_Rotate = m_PlayerPC.FindAction("Rotate", throwIfNotFound: true);
        m_PlayerPC_AdjustSpeed = m_PlayerPC.FindAction("AdjustSpeed", throwIfNotFound: true);
        // BlindCanePC
        m_BlindCanePC = asset.FindActionMap("BlindCanePC", throwIfNotFound: true);
        m_BlindCanePC_Rotate = m_BlindCanePC.FindAction("Rotate", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_PlayerAndroid.enabled, "This will cause a leak and performance issues, Controls.PlayerAndroid.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerPC.enabled, "This will cause a leak and performance issues, Controls.PlayerPC.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_BlindCanePC.enabled, "This will cause a leak and performance issues, Controls.BlindCanePC.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAndroid
    private readonly InputActionMap m_PlayerAndroid;
    private List<IPlayerAndroidActions> m_PlayerAndroidActionsCallbackInterfaces = new List<IPlayerAndroidActions>();
    private readonly InputAction m_PlayerAndroid_Move;
    private readonly InputAction m_PlayerAndroid_Rotate;
    /// <summary>
    /// Provides access to input actions defined in input action map "PlayerAndroid".
    /// </summary>
    public struct PlayerAndroidActions
    {
        private @Controls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerAndroidActions(@Controls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PlayerAndroid/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_PlayerAndroid_Move;
        /// <summary>
        /// Provides access to the underlying input action "PlayerAndroid/Rotate".
        /// </summary>
        public InputAction @Rotate => m_Wrapper.m_PlayerAndroid_Rotate;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PlayerAndroid; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerAndroidActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerAndroidActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerAndroidActions" />
        public void AddCallbacks(IPlayerAndroidActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerAndroidActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerAndroidActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerAndroidActions" />
        private void UnregisterCallbacks(IPlayerAndroidActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerAndroidActions.UnregisterCallbacks(IPlayerAndroidActions)" />.
        /// </summary>
        /// <seealso cref="PlayerAndroidActions.UnregisterCallbacks(IPlayerAndroidActions)" />
        public void RemoveCallbacks(IPlayerAndroidActions instance)
        {
            if (m_Wrapper.m_PlayerAndroidActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerAndroidActions.AddCallbacks(IPlayerAndroidActions)" />
        /// <seealso cref="PlayerAndroidActions.RemoveCallbacks(IPlayerAndroidActions)" />
        /// <seealso cref="PlayerAndroidActions.UnregisterCallbacks(IPlayerAndroidActions)" />
        public void SetCallbacks(IPlayerAndroidActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerAndroidActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerAndroidActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerAndroidActions" /> instance referencing this action map.
    /// </summary>
    public PlayerAndroidActions @PlayerAndroid => new PlayerAndroidActions(this);

    // PlayerPC
    private readonly InputActionMap m_PlayerPC;
    private List<IPlayerPCActions> m_PlayerPCActionsCallbackInterfaces = new List<IPlayerPCActions>();
    private readonly InputAction m_PlayerPC_Move;
    private readonly InputAction m_PlayerPC_Rotate;
    private readonly InputAction m_PlayerPC_AdjustSpeed;
    /// <summary>
    /// Provides access to input actions defined in input action map "PlayerPC".
    /// </summary>
    public struct PlayerPCActions
    {
        private @Controls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerPCActions(@Controls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PlayerPC/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_PlayerPC_Move;
        /// <summary>
        /// Provides access to the underlying input action "PlayerPC/Rotate".
        /// </summary>
        public InputAction @Rotate => m_Wrapper.m_PlayerPC_Rotate;
        /// <summary>
        /// Provides access to the underlying input action "PlayerPC/AdjustSpeed".
        /// </summary>
        public InputAction @AdjustSpeed => m_Wrapper.m_PlayerPC_AdjustSpeed;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PlayerPC; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerPCActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerPCActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerPCActions" />
        public void AddCallbacks(IPlayerPCActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerPCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerPCActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @AdjustSpeed.started += instance.OnAdjustSpeed;
            @AdjustSpeed.performed += instance.OnAdjustSpeed;
            @AdjustSpeed.canceled += instance.OnAdjustSpeed;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerPCActions" />
        private void UnregisterCallbacks(IPlayerPCActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @AdjustSpeed.started -= instance.OnAdjustSpeed;
            @AdjustSpeed.performed -= instance.OnAdjustSpeed;
            @AdjustSpeed.canceled -= instance.OnAdjustSpeed;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerPCActions.UnregisterCallbacks(IPlayerPCActions)" />.
        /// </summary>
        /// <seealso cref="PlayerPCActions.UnregisterCallbacks(IPlayerPCActions)" />
        public void RemoveCallbacks(IPlayerPCActions instance)
        {
            if (m_Wrapper.m_PlayerPCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerPCActions.AddCallbacks(IPlayerPCActions)" />
        /// <seealso cref="PlayerPCActions.RemoveCallbacks(IPlayerPCActions)" />
        /// <seealso cref="PlayerPCActions.UnregisterCallbacks(IPlayerPCActions)" />
        public void SetCallbacks(IPlayerPCActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerPCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerPCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerPCActions" /> instance referencing this action map.
    /// </summary>
    public PlayerPCActions @PlayerPC => new PlayerPCActions(this);

    // BlindCanePC
    private readonly InputActionMap m_BlindCanePC;
    private List<IBlindCanePCActions> m_BlindCanePCActionsCallbackInterfaces = new List<IBlindCanePCActions>();
    private readonly InputAction m_BlindCanePC_Rotate;
    /// <summary>
    /// Provides access to input actions defined in input action map "BlindCanePC".
    /// </summary>
    public struct BlindCanePCActions
    {
        private @Controls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public BlindCanePCActions(@Controls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "BlindCanePC/Rotate".
        /// </summary>
        public InputAction @Rotate => m_Wrapper.m_BlindCanePC_Rotate;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_BlindCanePC; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="BlindCanePCActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(BlindCanePCActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="BlindCanePCActions" />
        public void AddCallbacks(IBlindCanePCActions instance)
        {
            if (instance == null || m_Wrapper.m_BlindCanePCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BlindCanePCActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="BlindCanePCActions" />
        private void UnregisterCallbacks(IBlindCanePCActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="BlindCanePCActions.UnregisterCallbacks(IBlindCanePCActions)" />.
        /// </summary>
        /// <seealso cref="BlindCanePCActions.UnregisterCallbacks(IBlindCanePCActions)" />
        public void RemoveCallbacks(IBlindCanePCActions instance)
        {
            if (m_Wrapper.m_BlindCanePCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="BlindCanePCActions.AddCallbacks(IBlindCanePCActions)" />
        /// <seealso cref="BlindCanePCActions.RemoveCallbacks(IBlindCanePCActions)" />
        /// <seealso cref="BlindCanePCActions.UnregisterCallbacks(IBlindCanePCActions)" />
        public void SetCallbacks(IBlindCanePCActions instance)
        {
            foreach (var item in m_Wrapper.m_BlindCanePCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BlindCanePCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="BlindCanePCActions" /> instance referencing this action map.
    /// </summary>
    public BlindCanePCActions @BlindCanePC => new BlindCanePCActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerAndroid" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerAndroidActions.AddCallbacks(IPlayerAndroidActions)" />
    /// <seealso cref="PlayerAndroidActions.RemoveCallbacks(IPlayerAndroidActions)" />
    public interface IPlayerAndroidActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotate(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerPC" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerPCActions.AddCallbacks(IPlayerPCActions)" />
    /// <seealso cref="PlayerPCActions.RemoveCallbacks(IPlayerPCActions)" />
    public interface IPlayerPCActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AdjustSpeed" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAdjustSpeed(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "BlindCanePC" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="BlindCanePCActions.AddCallbacks(IBlindCanePCActions)" />
    /// <seealso cref="BlindCanePCActions.RemoveCallbacks(IBlindCanePCActions)" />
    public interface IBlindCanePCActions
    {
        /// <summary>
        /// Method invoked when associated input action "Rotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotate(InputAction.CallbackContext context);
    }
}
